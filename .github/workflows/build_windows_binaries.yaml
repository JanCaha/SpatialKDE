name: Build Windows Binaries and Create Release

on:
  push:
    tags:
      - v**

jobs:
  build-deploy:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: File Name Create
        id: file_name
        run: |
          echo "::set-output name=FILE_NAME::SpatialKDE_$(cat DESCRIPTION | grep '^Version' | grep -o '[0-9\.]*').zip"
          echo "::set-output name=FILE_PATH::./release/SpatialKDE_$(cat DESCRIPTION | grep '^Version' | grep -o '[0-9\.]*').zip"

      - name: Get Version
        id: version
        run: |
          echo "::set-output name=VERSION::$(cat DESCRIPTION | grep '^Version' | grep -o '[0-9\.]*')"
          echo "::set-output name=RELEASE_NAME::Release-$(cat DESCRIPTION | grep '^Version' | grep -o '[0-9\.]*')"

      - name: Install RTools
        uses: crazy-max/ghaction-chocolatey@v1
        with:
          args: install rtools --version=3.5 -y

      - name: Install R
        uses: crazy-max/ghaction-chocolatey@v1
        with:
          args: install r.project -y --version=3.6.2

      - name: Install dependencies
        run: |
            C:\"Program Files"\R\R-3.6.2\bin\Rscript.exe -e "Sys.setenv(TZ='Greenwich');install.packages(c('remotes', 'rcmdcheck', 'devtools', 'Rcpp'), repos = 'https://cran.rstudio.com/')"
            C:\"Program Files"\R\R-3.6.2\bin\Rscript.exe -e "Sys.setenv(TZ='Greenwich');remotes::install_deps(dependencies = TRUE, type='win.binary')"

      - name: Build binary
        run: |
            C:\"Program Files"\R\R-3.6.2\bin\Rscript.exe -e "devtools::document(roclets = c('rd', 'collate', 'namespace', 'vignette'))"
            C:\"Program Files"\R\R-3.6.2\bin\Rscript.exe -e "devtools::build(path = './release', binary = TRUE, args = c('--preclean'))"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ steps.version.outputs.RELEASE_NAME }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ${{ steps.file_name.outputs.FILE_PATH}}
          asset_name: ${{ steps.file_name.outputs.FILE_NAME}}
          asset_content_type: application/zip
